#!/usr/bin/env node

/**
 * Write Operations Compliance Checker
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ write operations ‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡πÉ‡∏ä‡πâ field names ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏° DATABASE_ARCHITECTURE_SUMMARY.md
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const projectRoot = path.join(__dirname, '..');

// Field mappings ‡∏ï‡∏≤‡∏° DATABASE_ARCHITECTURE_SUMMARY.md
const FIELD_MAPPINGS = {
  users: {
    requiredFields: ['uid', 'email', 'displayName', 'firstName', 'lastName', 'currentPlan', 'createdAt', 'updatedAt', 'lastLoginAt', 'isActive'],
    deprecatedFields: ['subscription', 'planType', 'dailyUsage', 'lastUsageDate'] // ‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß
  },
  user_originals: {
    requiredFields: ['userId', 'email', 'originalFirstName', 'originalLastName', 'originalFullName', 'createdAt', 'isLocked'],
    deprecatedFields: ['uid'] // ‡πÉ‡∏ä‡πâ userId ‡πÅ‡∏ó‡∏ô uid
  },
  conversations: {
    requiredFields: ['conversationId', 'userId', 'title', 'messages', 'messageCount', 'totalTokens', 'totalRequest', 'totalContext', 'createdAt', 'updatedAt', 'isArchived']
  },
  usage_tracking: {
    requiredFields: ['trackingId', 'userId', 'date', 'requests', 'tokens', 'context', 'conversations', 'resetAt', 'createdAt', 'updatedAt'],
    nestedStructure: {
      'requests': ['count', 'limit', 'remaining'],
      'tokens': ['used', 'limit', 'remaining'],
      'context': ['used', 'limit', 'remaining'],
      'conversations': ['created', 'limit', 'remaining']
    },
    deprecatedFields: ['requestCount', 'planType'] // ‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô nested structure
  },
  subscription_plans: {
    requiredFields: ['planId', 'name', 'description', 'prices', 'limits', 'features', 'isActive', 'createdAt', 'updatedAt'],
    fieldMapping: {
      'id': 'planId', // ‡πÉ‡∏ä‡πâ planId ‡πÅ‡∏ó‡∏ô id
      'active': 'isActive' // ‡πÉ‡∏ä‡πâ isActive ‡πÅ‡∏ó‡∏ô active
    }
  },
  billing_transactions: {
    requiredFields: ['transactionId', 'userId', 'amount', 'currency', 'planId', 'planType', 'status', 'paymentMethod', 'createdAt', 'updatedAt']
  },
  usage_analytics: {
    requiredFields: ['analyticsId', 'userId', 'date', 'requestsCount', 'tokensUsed', 'contextUsed', 'conversationsCreated', 'responseTimeAvg', 'createdAt', 'updatedAt']
  }
};

class WriteOperationsChecker {
  constructor() {
    this.issues = [];
    this.filesChecked = 0;
    this.patterns = {
      // Firestore write operations
      setDoc: /setDoc\s*\(\s*[^,]+\s*,\s*\{([^}]+)\}/g,
      addDoc: /addDoc\s*\(\s*[^,]+\s*,\s*\{([^}]+)\}/g,
      updateDoc: /updateDoc\s*\(\s*[^,]+\s*,\s*\{([^}]+)\}/g,
      
      // Collection references
      collection: /collection\s*\(\s*[^,]+\s*,\s*['"`]([^'"`]+)['"`]/g,
      doc: /doc\s*\(\s*[^,]+\s*,\s*['"`]([^'"`]+)['"`]/g
    };
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå JavaScript/TypeScript
  async checkFile(filePath) {
    try {
      const content = fs.readFileSync(filePath, 'utf8');
      const relativePath = path.relative(projectRoot, filePath);
      
      this.filesChecked++;
      console.log(`üìÅ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö: ${relativePath}`);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö write operations
      this.checkWriteOperations(content, relativePath);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö collection names
      this.checkCollectionNames(content, relativePath);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö deprecated fields
      this.checkDeprecatedFields(content, relativePath);

    } catch (error) {
      this.addIssue('ERROR', filePath, 0, `Cannot read file: ${error.message}`);
    }
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö write operations
  checkWriteOperations(content, filePath) {
    const lines = content.split('\n');
    
    ['setDoc', 'addDoc', 'updateDoc'].forEach(operation => {
      const pattern = this.patterns[operation];
      let match;
      
      while ((match = pattern.exec(content)) !== null) {
        const objectContent = match[1];
        const lineNumber = content.substring(0, match.index).split('\n').length;
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö field names ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ write operation
        this.checkFieldNames(objectContent, filePath, lineNumber, operation);
      }
    });
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠ collection
  checkCollectionNames(content, filePath) {
    const validCollections = Object.keys(FIELD_MAPPINGS);
    const pattern = this.patterns.collection;
    let match;
    
    while ((match = pattern.exec(content)) !== null) {
      const collectionName = match[1];
      const lineNumber = content.substring(0, match.index).split('\n').length;
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô collection ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ‡πÉ‡∏ô schema ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (collectionName !== 'test' && !validCollections.includes(collectionName)) {
        // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô collection ‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const deprecatedCollections = ['plan_configs', 'subscriptions'];
        if (deprecatedCollections.includes(collectionName)) {
          this.addIssue('ERROR', filePath, lineNumber, 
            `Deprecated collection "${collectionName}" found. Use "${this.getReplacementCollection(collectionName)}" instead`);
        } else {
          this.addIssue('WARNING', filePath, lineNumber, 
            `Unknown collection "${collectionName}" not defined in DATABASE_ARCHITECTURE_SUMMARY.md`);
        }
      }
    }
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö field names
  checkFieldNames(objectContent, filePath, lineNumber, operation) {
    // Extract field names from object content
    const fieldPattern = /(\w+)\s*:/g;
    let fieldMatch;
    
    while ((fieldMatch = fieldPattern.exec(objectContent)) !== null) {
      const fieldName = fieldMatch[1];
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö deprecated fields
      Object.entries(FIELD_MAPPINGS).forEach(([collection, schema]) => {
        if (schema.deprecatedFields && schema.deprecatedFields.includes(fieldName)) {
          this.addIssue('ERROR', filePath, lineNumber, 
            `Deprecated field "${fieldName}" found in ${operation}. Should use schema-compliant field for ${collection} collection`);
        }
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö field mapping
        if (schema.fieldMapping && schema.fieldMapping[fieldName]) {
          this.addIssue('WARNING', filePath, lineNumber, 
            `Field "${fieldName}" should be "${schema.fieldMapping[fieldName]}" according to ${collection} schema`);
        }
      });
    }
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö deprecated fields
  checkDeprecatedFields(content, filePath) {
    const deprecatedPatterns = [
      { pattern: /subscription\.planType/g, message: 'Use userData.currentPlan instead of subscription.planType' },
      { pattern: /requestCount/g, message: 'Use requests.count instead of requestCount for usage_tracking' },
      { pattern: /plan_configs/g, message: 'Use subscription_plans collection instead of plan_configs' },
      { pattern: /\.uid\s*:/g, message: 'Use userId field instead of uid in user_originals collection' },
      { pattern: /active\s*:/g, message: 'Use isActive field instead of active in subscription_plans' }
    ];
    
    deprecatedPatterns.forEach(({ pattern, message }) => {
      let match;
      while ((match = pattern.exec(content)) !== null) {
        const lineNumber = content.substring(0, match.index).split('\n').length;
        this.addIssue('WARNING', filePath, lineNumber, message);
      }
    });
  }

  // ‡∏£‡∏±‡∏ö collection ‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ‡πÅ‡∏ó‡∏ô
  getReplacementCollection(deprecated) {
    const replacements = {
      'plan_configs': 'subscription_plans',
      'subscriptions': 'billing_transactions'
    };
    return replacements[deprecated] || 'unknown';
  }

  // ‡πÄ‡∏û‡∏¥‡πà‡∏° issue
  addIssue(type, file, line, message) {
    this.issues.push({
      type,
      file: path.relative(projectRoot, file),
      line,
      message
    });
    
    const icon = type === 'ERROR' ? '‚ùå' : type === 'WARNING' ? '‚ö†Ô∏è' : '‚ÑπÔ∏è';
    console.log(`   ${icon} Line ${line}: ${message}`);
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö directory
  async checkDirectory(dirPath) {
    const items = fs.readdirSync(dirPath);
    
    for (const item of items) {
      const fullPath = path.join(dirPath, item);
      const stat = fs.statSync(fullPath);
      
      if (stat.isDirectory()) {
        // ‡∏Ç‡πâ‡∏≤‡∏° directories ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
        if (!['node_modules', '.git', 'dist', 'build', 'coverage'].includes(item)) {
          await this.checkDirectory(fullPath);
        }
      } else if (stat.isFile()) {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå JavaScript/TypeScript ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
        if (/\.(js|ts|jsx|tsx)$/.test(item) && !item.includes('.test.') && !item.includes('.spec.')) {
          await this.checkFile(fullPath);
        }
      }
    }
  }

  // ‡∏£‡∏±‡∏ô checker ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  async run() {
    console.log('üîç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Write Operations Compliance');
    console.log('üìã ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏° DATABASE_ARCHITECTURE_SUMMARY.md\n');

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö src ‡πÅ‡∏•‡∏∞ mcp-servers directories
    const dirsToCheck = [
      path.join(projectRoot, 'src'),
      path.join(projectRoot, 'mcp-servers')
    ];

    for (const dir of dirsToCheck) {
      if (fs.existsSync(dir)) {
        console.log(`üìÇ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö directory: ${path.relative(projectRoot, dir)}`);
        await this.checkDirectory(dir);
      }
    }

    this.printSummary();
  }

  // ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
  printSummary() {
    console.log('\n' + '='.repeat(80));
    console.log('üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Write Operations Compliance');
    console.log('='.repeat(80));
    
    const errors = this.issues.filter(issue => issue.type === 'ERROR');
    const warnings = this.issues.filter(issue => issue.type === 'WARNING');
    
    console.log(`üìÅ ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö: ${this.filesChecked}`);
    console.log(`‚ùå Errors: ${errors.length}`);
    console.log(`‚ö†Ô∏è Warnings: ${warnings.length}`);
    
    if (errors.length === 0 && warnings.length === 0) {
      console.log('\nüéâ ‡∏ó‡∏∏‡∏Å write operations ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö DATABASE_ARCHITECTURE_SUMMARY.md ‡πÅ‡∏•‡πâ‡∏ß!');
    } else {
      if (errors.length > 0) {
        console.log('\n‚ùå Errors ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:');
        errors.forEach(issue => {
          console.log(`   ${issue.file}:${issue.line} - ${issue.message}`);
        });
      }
      
      if (warnings.length > 0) {
        console.log('\n‚ö†Ô∏è Warnings ‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤:');
        warnings.forEach(issue => {
          console.log(`   ${issue.file}:${issue.line} - ${issue.message}`);
        });
      }
    }
    
    console.log('\nüí° ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö DATABASE_ARCHITECTURE_SUMMARY.md ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π schema ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
  }
}

// ‡∏£‡∏±‡∏ô checker
async function main() {
  try {
    const checker = new WriteOperationsChecker();
    await checker.run();
  } catch (error) {
    console.error('‚ùå Error running write operations checker:', error);
    process.exit(1);
  }
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ñ‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏£‡∏±‡∏ô‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}

export default WriteOperationsChecker;