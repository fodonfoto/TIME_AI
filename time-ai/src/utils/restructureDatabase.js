import { 
  collection, 
  doc, 
  setDoc, 
  getDocs, 
  query, 
  where,
  addDoc,
  serverTimestamp,
  connectFirestoreEmulator
} from 'firebase/firestore';
import { db, auth } from '../config/firebase';
import { onAuthStateChanged } from 'firebase/auth';

// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Firebase Connection
export const testFirebaseConnection = async () => {
  try {
    console.log('üîç Testing Firebase connection...');
    console.log('üîó Database instance:', !!db);
    console.log('üîó Auth instance:', !!auth);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö authentication status
    return new Promise((resolve) => {
      const unsubscribe = onAuthStateChanged(auth, (user) => {
        console.log('üë§ Current user:', user ? {
          uid: user.uid,
          email: user.email,
          displayName: user.displayName
        } : 'No user authenticated');
        
        unsubscribe();
        resolve({
          dbConnected: !!db,
          authConnected: !!auth,
          userAuthenticated: !!user,
          user: user ? {
            uid: user.uid,
            email: user.email,
            displayName: user.displayName
          } : null
        });
      });
    });
  } catch (error) {
    console.error('‚ùå Firebase connection test failed:', error);
    return {
      dbConnected: false,
      authConnected: false,
      userAuthenticated: false,
      error: error.message
    };
  }
};

/**
 * ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà:
 * users > plan_configs > chat_id (‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á) > history_items (‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö History page)
 */

// 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á subcollection structure ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö new user
export const createUserStructure = async (userId, userInfo) => {
  try {
    console.log(`üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö user: ${userId}`);
    
    if (!db) {
      throw new Error('Firebase database not initialized');
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á user document
    const userRef = doc(db, 'users', userId);
    const userData = {
      ...userInfo,
      createdAt: serverTimestamp(),
      updatedAt: serverTimestamp()
    };
    
    await setDoc(userRef, userData);
    console.log('‚úÖ User document created successfully');

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á plan_configs subcollection
    const planConfigsRef = collection(userRef, 'plan_configs');
    const defaultPlanRef = doc(planConfigsRef, 'current_plan');
    const planData = {
      planName: 'Free Plan',
      dailyLimit: 5,
      dailyUsage: 0,
      lastResetDate: new Date().toISOString().split('T')[0],
      createdAt: serverTimestamp()
    };
    
    await setDoc(defaultPlanRef, planData);
    console.log('‚úÖ Plan config created successfully');

    console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö user ${userId} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`);
    return true;
  } catch (error) {
    console.error('‚ùå Error creating user structure:', error);
    return false;
  }
};

// 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á chat session ‡πÉ‡∏´‡∏°‡πà
export const createChatSession = async (userId, chatTitle = '‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÉ‡∏´‡∏°‡πà', initialModel = null) => {
  try {
    const userRef = doc(db, 'users', userId);
    const planConfigsRef = collection(userRef, 'plan_configs');
    const currentPlanRef = doc(planConfigsRef, 'current_plan');
    const chatIdRef = collection(currentPlanRef, 'chat_id');
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á chat_id document ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    const newChatRef = await addDoc(chatIdRef, {
      title: chatTitle,
      messages: [], // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
      createdAt: serverTimestamp(),
      updatedAt: serverTimestamp(),
      status: 'active',
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• AI model ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ä‡∏ó‡πÉ‡∏´‡∏°‡πà (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
      initialModel: initialModel,
      lastModel: null // ‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å AI
    });

    console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á chat session ‡πÉ‡∏´‡∏°‡πà: ${newChatRef.id}`);
    return newChatRef.id;
  } catch (error) {
    console.error('‚ùå Error creating chat session:', error);
    return null;
  }
};

// 3. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤ (‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô chat_id)
export const saveChatMessage = async (userId, chatId, message) => {
  try {
    const userRef = doc(db, 'users', userId);
    const planConfigsRef = collection(userRef, 'plan_configs');
    const currentPlanRef = doc(planConfigsRef, 'current_plan');
    const chatIdRef = collection(currentPlanRef, 'chat_id');
    const specificChatRef = doc(chatIdRef, chatId);
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°
    const chatDoc = await getDocs(query(collection(currentPlanRef, 'chat_id'), where('__name__', '==', chatId)));
    let existingMessages = [];
    
    if (!chatDoc.empty) {
      const chatData = chatDoc.docs[0].data();
      existingMessages = chatData.messages || [];
    }
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà
    const newMessage = {
      role: message.role,
      content: message.content,
      timestamp: serverTimestamp(),
      messageId: `msg_${Date.now()}`,
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• AI model ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
      model: message.model || null
    };
    
    const updatedMessages = [...existingMessages, newMessage];
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï chat document
    await setDoc(specificChatRef, {
      title: message.title || '‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÉ‡∏´‡∏°‡πà',
      messages: updatedMessages,
      updatedAt: serverTimestamp(),
      status: 'active',
      messageCount: updatedMessages.length,
      // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• AI model ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
      lastModel: message.role === 'assistant' ? message.model : null
    }, { merge: true });

    console.log(`‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: ${newMessage.messageId}`);
    return newMessage.messageId;
  } catch (error) {
    console.error('‚ùå Error saving chat message:', error);
    return null;
  }
};

// 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á history item (‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô history_items ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ History)
export const createHistoryItem = async (userId, chatId, historyData) => {
  try {
    const userRef = doc(db, 'users', userId);
    const planConfigsRef = collection(userRef, 'plan_configs');
    const currentPlanRef = doc(planConfigsRef, 'current_plan');
    const chatIdRef = collection(currentPlanRef, 'chat_id');
    const specificChatRef = doc(chatIdRef, chatId);
    const historyItemsRef = collection(specificChatRef, 'history_items');
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• chat session ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• model
    const chatDoc = await getDoc(specificChatRef);
    let initialModel = null;
    let lastModel = null;
    
    if (chatDoc.exists()) {
      const chatData = chatDoc.data();
      initialModel = chatData.initialModel || null;
      lastModel = chatData.lastModel || null;
    }
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á history item
    const historyItemRef = await addDoc(historyItemsRef, {
      title: historyData.title,
      preview: historyData.preview, // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
      date: historyData.date || new Date().toLocaleDateString('th-TH'),
      messageCount: historyData.messageCount || 0,
      createdAt: serverTimestamp(),
      chatId: chatId, // reference ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ chat_id
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• AI model ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
      initialModel: initialModel,
      lastModel: lastModel
    });

    console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á history item: ${historyItemRef.id}`);
    return historyItemRef.id;
  } catch (error) {
    console.error('‚ùå Error creating history item:', error);
    return null;
  }
};

// 5. ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á user (‡∏à‡∏≤‡∏Å history_items)
export const getUserChatHistory = async (userId) => {
  try {
    const userRef = doc(db, 'users', userId);
    const planConfigsRef = collection(userRef, 'plan_configs');
    const currentPlanRef = doc(planConfigsRef, 'current_plan');
    const chatIdRef = collection(currentPlanRef, 'chat_id');
    
    const chatSnapshot = await getDocs(chatIdRef);
    const chatHistory = [];

    for (const chatDoc of chatSnapshot.docs) {
      const chatData = chatDoc.data();
      const historyItemsRef = collection(chatDoc.ref, 'history_items');
      const historySnapshot = await getDocs(historyItemsRef);
      
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å history_items
      const historyItems = historySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      }));

      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ history items ‡πÉ‡∏´‡πâ‡πÄ‡∏≠‡∏≤‡∏°‡∏≤‡πÅ‡∏™‡∏î‡∏á
      if (historyItems.length > 0) {
        historyItems.forEach(item => {
          chatHistory.push({
            historyId: item.id,
            chatId: chatDoc.id,
            title: item.title,
            preview: item.preview,
            date: item.date,
            messageCount: item.messageCount,
            createdAt: item.createdAt,
            // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• AI model ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
            initialModel: chatData.initialModel || null,
            lastModel: chatData.lastModel || null
          });
        });
      }
    }

    return chatHistory.sort((a, b) => b.createdAt - a.createdAt);
  } catch (error) {
    console.error('‚ùå Error getting user chat history:', error);
    return [];
  }
};

// 6. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞ chat_id (‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á)
export const getChatById = async (userId, chatId) => {
  try {
    const userRef = doc(db, 'users', userId);
    const planConfigsRef = collection(userRef, 'plan_configs');
    const currentPlanRef = doc(planConfigsRef, 'current_plan');
    const chatIdRef = collection(currentPlanRef, 'chat_id');
    const specificChatRef = doc(chatIdRef, chatId);
    
    const chatDoc = await getDocs(query(chatIdRef, where('__name__', '==', chatId)));
    
    if (!chatDoc.empty) {
      const chatData = chatDoc.docs[0].data();
      return {
        chatId: chatId,
        title: chatData.title,
        messages: chatData.messages || [],
        createdAt: chatData.createdAt,
        updatedAt: chatData.updatedAt,
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• AI model ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
        initialModel: chatData.initialModel || null,
        lastModel: chatData.lastModel || null
      };
    }
    
    return null;
  } catch (error) {
    console.error('‚ùå Error getting chat by ID:', error);
    return null;
  }
};

// 7. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• mockup ‡πÉ‡∏´‡πâ‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå 100%
export const createCompleteMockupData = async (userId = null) => {
  try {
    console.log('üé≠ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• mockup ‡πÉ‡∏´‡πâ‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå...');
    
    const testUserId = userId || `mockup_user_${Date.now()}`;
    
    // 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á user
    const userInfo = {
      email: `${testUserId}@example.com`,
      firstName: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
      lastName: '‡∏£‡∏∞‡∏ö‡∏ö',
      displayName: `‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö ${testUserId.slice(-6)}`,
      photoURL: 'https://via.placeholder.com/150',
      uid: testUserId
    };
    
    await createUserStructure(testUserId, userInfo);
    console.log('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á user ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');
    
    // 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á chat sessions ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞ history items
    const chatData = [
      {
        title: '‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö AI',
        initialModel: 'gpt-4o',
        messages: [
          { role: 'user', content: 'AI ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£ ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?' },
          { role: 'assistant', content: 'AI ‡∏´‡∏£‡∏∑‡∏≠ Artificial Intelligence ‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡πÑ‡∏î‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡πå', model: 'gpt-4o' },
          { role: 'user', content: '‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á AI ‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á?' },
          { role: 'assistant', content: 'AI ‡πÅ‡∏ö‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô 3 ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏•‡∏±‡∏Å: 1) Narrow AI (AI ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏≤‡∏á) 2) General AI (AI ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ) 3) Super AI (AI ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡πå)', model: 'gpt-4o' }
        ]
      },
      {
        title: '‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô',
        initialModel: 'gpt-3.5-turbo',
        messages: [
          { role: 'user', content: '‡∏ä‡πà‡∏ß‡∏¢‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πà‡∏≠‡∏¢' },
          { role: 'assistant', content: '‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏© 3 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô:\n1. ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡πÑ‡∏ß‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå\n2. ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏ù‡∏∂‡∏Å‡∏ü‡∏±‡∏á-‡∏û‡∏π‡∏î\n3. ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà 3: ‡∏≠‡πà‡∏≤‡∏ô-‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô', model: 'gpt-3.5-turbo' },
          { role: 'user', content: '‡∏°‡∏µ‡πÅ‡∏≠‡∏õ‡πÑ‡∏´‡∏ô‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ù‡∏∂‡∏Å‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡∏ö‡πâ‡∏≤‡∏á?' },
          { role: 'assistant', content: '‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ Duolingo, BBC Learning English, ‡πÅ‡∏•‡∏∞ HelloTalk', model: 'gpt-3.5-turbo' }
        ]
      },
      {
        title: '‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏á‡∏≤‡∏ô',
        initialModel: 'claude-3-opus',
        messages: [
          { role: 'user', content: '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏¥‡∏î‡∏à‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏á‡∏≤‡∏ô ‡∏Ñ‡∏ß‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á?' },
          { role: 'assistant', content: '‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏á‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤:\n1. ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏ô‡∏≠‡∏≤‡∏ä‡∏µ‡∏û\n2. ‡∏™‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô\n3. ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï\n4. ‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô\n5. Work-life balance', model: 'claude-3-opus' },
          { role: 'user', content: '‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏£‡∏±‡∏ö ‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏°‡∏≤‡∏Å' },
          { role: 'assistant', content: '‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏´‡∏ß‡∏±‡∏á‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö', model: 'claude-3-opus' }
        ]
      }
    ];
    
    let totalMessages = 0;
    const chatSessions = [];
    
    for (const chat of chatData) {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á chat session
      const chatId = await createChatSession(testUserId, chat.title);
      if (chatId) {
        chatSessions.push({ chatId, title: chat.title });
        
        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô chat_id
        const userRef = doc(db, 'users', testUserId);
        const planConfigsRef = collection(userRef, 'plan_configs');
        const currentPlanRef = doc(planConfigsRef, 'current_plan');
        const chatIdRef = collection(currentPlanRef, 'chat_id');
        const specificChatRef = doc(chatIdRef, chatId);
        
        await setDoc(specificChatRef, {
          title: chat.title,
          messages: chat.messages,
          createdAt: serverTimestamp(),
          updatedAt: serverTimestamp(),
          status: 'active',
          messageCount: chat.messages.length
        });
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á history item
        const lastMessage = chat.messages[chat.messages.length - 1];
        await createHistoryItem(testUserId, chatId, {
          title: chat.title,
          preview: lastMessage.content.substring(0, 50) + '...',
          date: new Date().toLocaleDateString('th-TH'),
          messageCount: chat.messages.length
        });
        
        totalMessages += chat.messages.length;
        console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á chat "${chat.title}" ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ (${chat.messages.length} ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°)`);
      }
    }
    
    console.log('üéâ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• mockup ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!');
    
    return {
      success: true,
      testUserId,
      chatSessions: chatSessions.length,
      totalMessages,
      message: `‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• mockup ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö user ${testUserId} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ (${chatSessions.length} chats, ${totalMessages} messages)`
    };
    
  } catch (error) {
    console.error('‚ùå Error creating complete mockup data:', error);
    return {
      success: false,
      error: error.message,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• mockup'
    };
  }
};

// 8. ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ collection
export const getDataStructureInfo = () => {
  return {
    users: {
      description: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏•‡∏±‡∏Å",
      fields: ["email", "firstName", "lastName", "displayName", "photoURL", "uid", "createdAt", "updatedAt"]
    },
    plan_configs: {
      description: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ",
      fields: ["planName", "dailyLimit", "dailyUsage", "lastResetDate", "features", "createdAt"]
    },
    chat_id: {
      description: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏à‡∏£‡∏¥‡∏á (‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°)",
      fields: ["title", "messages", "createdAt", "updatedAt", "status", "messageCount"]
    },
    history_items: {
      description: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ History",
      fields: ["title", "preview", "date", "messageCount", "chatId", "createdAt"]
    }
  };
};