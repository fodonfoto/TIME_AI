import { useState } from 'react';
import firebaseService from '../services/firebaseService';
import { updateUserToPro } from '../utils/updateUserPlan';
import { getUserPlanInfo, updateUserPlan } from '../utils/userPlanManager';
import { addPlanFieldsToAllUsers } from '../utils/addPlanFieldsToUsers';
// cleanupPlanConfigs removed - using subscription_plans collection instead
import { useAuth } from '../hooks/useAuth';

function FirebaseTest() {
  const { user } = useAuth();
  const [testResult, setTestResult] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [createDataLoading, setCreateDataLoading] = useState(false);
  const [planConfigLoading, setPlanConfigLoading] = useState(false);
  const [scenarioLoading, setScenarioLoading] = useState(false);
  const [performanceLoading, setPerformanceLoading] = useState(false);
  const [updateUserLoading, setUpdateUserLoading] = useState(false);
  const [planInfoLoading, setPlanInfoLoading] = useState(false);
  const [addPlanFieldsLoading, setAddPlanFieldsLoading] = useState(false);
  // cleanupLoading state removed - cleanup function not needed with subscription_plans

  const testConnection = async () => {
    setIsLoading(true);
    setTestResult('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö...');
    
    try {
      const result = await firebaseService.testFirestoreConnection();
      if (result) {
        setTestResult('‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Firebase ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
      } else {
        setTestResult('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Firebase ‡πÑ‡∏î‡πâ');
      }
    } catch (error) {
      setTestResult(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`);
    }
    
    setIsLoading(false);
  };

  // cleanupDatabase function removed - using subscription_plans collection instead of plan_configs

  const addPlanFields = async () => {
    setAddPlanFieldsLoading(true);
    setTestResult('üîß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏° plan fields ‡πÉ‡∏´‡πâ users ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà...');
    
    try {
      const updatedCount = await addPlanFieldsToAllUsers();
      setTestResult(`‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° plan fields ‡πÉ‡∏´‡πâ ${updatedCount} users ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!`);
    } catch (error) {
      setTestResult(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏° plan fields ‡πÑ‡∏î‡πâ: ${error.message}`);
    }
    
    setAddPlanFieldsLoading(false);
  };

  const createTestData = async () => {
    if (!user) {
      setTestResult('‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô');
      return;
    }

    setCreateDataLoading(true);
    setTestResult('‚ö†Ô∏è ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß\n‡πÉ‡∏ä‡πâ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡πÉ‡∏ô /scripts ‡πÅ‡∏ó‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡πà‡∏≤‡∏ô Firebase Console');
    setCreateDataLoading(false);
  };

  const testPlanConfigs = async () => {
    setPlanConfigLoading(true);
    setTestResult('‚ö†Ô∏è ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö plan configs ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß\n‡πÉ‡∏ä‡πâ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå initPlanConfigs.js ‡πÉ‡∏ô /scripts ‡πÅ‡∏ó‡∏ô');
    setPlanConfigLoading(false);
  };

  const updateUserPlanTest = async () => {
    setUpdateUserLoading(true);
    setTestResult('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï researchchatgpt01@gmail.com ‡πÄ‡∏õ‡πá‡∏ô Pro plan...');
    
    try {
      const success = await updateUserPlan('researchchatgpt01@gmail.com', 'Pro Plan');
      if (success) {
        setTestResult('‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï researchchatgpt01@gmail.com ‡πÄ‡∏õ‡πá‡∏ô Pro Plan ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
      } else {
        setTestResult('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï user plan ‡πÑ‡∏î‡πâ');
      }
    } catch (error) {
      setTestResult(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï user plan: ${error.message}`);
    }
    
    setUpdateUserLoading(false);
  };

  const checkUserPlanInfo = async () => {
    if (!user) {
      setTestResult('‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô');
      return;
    }

    setPlanInfoLoading(true);
    setTestResult('üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• plan ‡∏Ç‡∏≠‡∏á user...');
    
    try {
      const planInfo = await getUserPlanInfo(user.uid);
      setTestResult(`üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Plan ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:\nPlan: ${planInfo.planName}\n‡∏£‡∏≤‡∏Ñ‡∏≤: $${planInfo.price}/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô\n‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô: ${planInfo.dailyLimit === -1 ? '‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î' : planInfo.dailyLimit + ' ‡∏Ñ‡∏£‡∏±‡πâ‡∏á'}\n‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ: ${planInfo.dailyUsage || 0} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á\nFeatures: ${planInfo.features.join(', ')}`);
    } catch (error) {
      setTestResult(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• plan ‡πÑ‡∏î‡πâ: ${error.message}`);
    }
    
    setPlanInfoLoading(false);
  };

  const runScenarios = async () => {
    if (!user) {
      setTestResult('‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô');
      return;
    }

    setScenarioLoading(true);
    setTestResult('‚ö†Ô∏è ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå Scenario Tests ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß\n‡πÉ‡∏ä‡πâ automated tests ‡πÉ‡∏ô /tests ‡πÅ‡∏ó‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏±‡∏ô npm test');
    setScenarioLoading(false);
  };

  const runPerformance = async () => {
    if (!user) {
      setTestResult('‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô');
      return;
    }

    setPerformanceLoading(true);
    setTestResult('‚ö†Ô∏è ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå Performance Tests ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß\n‡πÉ‡∏ä‡πâ automated tests ‡πÉ‡∏ô /tests ‡πÅ‡∏ó‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏±‡∏ô npm test');
    setPerformanceLoading(false);
  };

  return (
    <div style={{ padding: '20px', maxWidth: '800px', margin: '0 auto' }}>
      <h2>‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Firebase ‡πÅ‡∏•‡∏∞ User Plan Management</h2>
      
      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: '10px', marginBottom: '20px' }}>
        {/* Cleanup button removed - using subscription_plans collection instead of plan_configs */}
        
        <button 
          onClick={testConnection}
          disabled={isLoading}
          style={{
            padding: '10px 15px',
            fontSize: '14px',
            backgroundColor: '#007bff',
            color: 'white',
            border: 'none',
            borderRadius: '5px',
            cursor: isLoading ? 'not-allowed' : 'pointer'
          }}
        >
          {isLoading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö...' : '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠'}
        </button>
        
        <button 
          onClick={checkUserPlanInfo}
          disabled={planInfoLoading || !user}
          style={{
            padding: '10px 15px',
            fontSize: '14px',
            backgroundColor: '#17a2b8',
            color: 'white',
            border: 'none',
            borderRadius: '5px',
            cursor: (planInfoLoading || !user) ? 'not-allowed' : 'pointer'
          }}
        >
          {planInfoLoading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö...' : '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Plan Info'}
        </button>
        
        <button 
          onClick={updateUserPlanTest}
          disabled={updateUserLoading}
          style={{
            padding: '10px 15px',
            fontSize: '14px',
            backgroundColor: '#28a745',
            color: 'white',
            border: 'none',
            borderRadius: '5px',
            cursor: updateUserLoading ? 'not-allowed' : 'pointer'
          }}
        >
          {updateUserLoading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï...' : '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï User ‡πÄ‡∏õ‡πá‡∏ô Pro'}
        </button>
        
        <button 
          onClick={createTestData}
          disabled={createDataLoading || !user}
          style={{
            padding: '10px 15px',
            fontSize: '14px',
            backgroundColor: '#6f42c1',
            color: 'white',
            border: 'none',
            borderRadius: '5px',
            cursor: (createDataLoading || !user) ? 'not-allowed' : 'pointer'
          }}
        >
          {createDataLoading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á...' : '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö'}
        </button>
        
        <button 
          onClick={runScenarios}
          disabled={scenarioLoading || !user}
          style={{
            padding: '10px 15px',
            fontSize: '14px',
            backgroundColor: '#fd7e14',
            color: 'white',
            border: 'none',
            borderRadius: '5px',
            cursor: (scenarioLoading || !user) ? 'not-allowed' : 'pointer'
          }}
        >
          {scenarioLoading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö...' : '‡∏£‡∏±‡∏ô Scenario Tests'}
        </button>
        
        <button 
          onClick={runPerformance}
          disabled={performanceLoading || !user}
          style={{
            padding: '10px 15px',
            fontSize: '14px',
            backgroundColor: '#20c997',
            color: 'white',
            border: 'none',
            borderRadius: '5px',
            cursor: (performanceLoading || !user) ? 'not-allowed' : 'pointer'
          }}
        >
          {performanceLoading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö...' : '‡∏ó‡∏î‡∏™‡∏≠‡∏ö Performance'}
        </button>
      </div>
      
      {testResult && (
        <div style={{
          marginTop: '20px',
          padding: '15px',
          backgroundColor: testResult.includes('‚úÖ') ? '#d4edda' : '#f8d7da',
          border: `1px solid ${testResult.includes('‚úÖ') ? '#c3e6cb' : '#f5c6cb'}`,
          borderRadius: '5px',
          fontSize: '14px',
          whiteSpace: 'pre-line'
        }}>
          {testResult}
        </div>
      )}
      
      <div style={{ marginTop: '20px', fontSize: '12px', color: '#666' }}>
        <p><strong>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:</strong></p>
        <ul>
          <li><strong>‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Plan Info</strong>: ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• plan ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á user ‡∏ó‡∏µ‡πà login ‡∏≠‡∏¢‡∏π‡πà</li>
          <li><strong>‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï User ‡πÄ‡∏õ‡πá‡∏ô Pro</strong>: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï researchchatgpt01@gmail.com ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô Pro Plan</li>
          <li><strong>‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö</strong>: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• chat history ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö</li>
          <li><strong>‡∏£‡∏±‡∏ô Tests</strong>: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞ scenario ‡∏ï‡πà‡∏≤‡∏á‡πÜ</li>
          <li>‡πÄ‡∏õ‡∏¥‡∏î Developer Console (F12) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π logs ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</li>
        </ul>
      </div>
    </div>
  );
}

export default FirebaseTest;