import React, { useState } from 'react';
import { getDataStructureInfo } from '../utils/restructureDatabase';
import { autoSetupNewUser, checkUserDataCompleteness, createDemoDataForNewUser } from '../utils/autoUserSetup';
import { runFirebaseDebugTests } from '../utils/firebaseDebug';
import { useAuth } from '../hooks/useAuth';

const DatabaseRestructureTest = () => {
  const { user } = useAuth();
  const [results, setResults] = useState([]);
  const [loading, setLoading] = useState(false);
  const [lastTestUserId, setLastTestUserId] = useState(null);
  const [testChatId, setTestChatId] = useState(null);

  const addResult = (message, type = 'info') => {
    setResults(prev => {
      const newResult = { message, type, timestamp: new Date().toLocaleTimeString() };
      return [...prev, newResult];
    });
  };

  // ЁЯЖХ р╕Чр╕Фр╕кр╕нр╕Ър╕гр╕░р╕Ър╕Ъ Auto Setup
  const handleTestAutoSetup = async () => {
    setLoading(true);
    addResult('ЁЯФД р╕Чр╕Фр╕кр╕нр╕Ър╕гр╕░р╕Ър╕Ъ Auto Setup р╕кр╕│р╕лр╕гр╕▒р╕Ъ user р╕Ыр╕▒р╕Ир╕Ир╕╕р╕Ър╕▒р╕Щ...', 'info');
    
    if (!user) {
      addResult('тЭМ р╣Др╕бр╣Ир╕бр╕╡ user р╕Чр╕╡р╣И login р╕нр╕вр╕╣р╣И', 'error');
      setLoading(false);
      return;
    }
    
    try {
      const result = await autoSetupNewUser(user);
      addResult(result.message, result.success ? 'success' : 'error');
      
      if (result.success) {
        addResult(`ЁЯСд User ID: ${user.uid}`, 'info');
        addResult(`ЁЯЖХ Is New User: ${result.isNewUser ? 'р╣Гр╕Кр╣И' : 'р╣Др╕бр╣Ир╣Гр╕Кр╣И'}`, 'info');
        setLastTestUserId(user.uid);
      }
    } catch (error) {
      addResult(`тЭМ Error: ${error.message}`, 'error');
    }
    
    setLoading(false);
  };

  // ЁЯЖХ р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Др╕зр╕▓р╕бр╕кр╕бр╕Ър╕╣р╕гр╕Ур╣Мр╕Вр╕нр╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕е user р╕Ыр╕▒р╕Ир╕Ир╕╕р╕Ър╕▒р╕Щ
  const handleCheckCurrentUserData = async () => {
    setLoading(true);
    addResult('ЁЯФН р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Др╕зр╕▓р╕бр╕кр╕бр╕Ър╕╣р╕гр╕Ур╣Мр╕Вр╕нр╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕е user р╕Ыр╕▒р╕Ир╕Ир╕╕р╕Ър╕▒р╕Щ...', 'info');
    
    if (!user) {
      addResult('тЭМ р╣Др╕бр╣Ир╕бр╕╡ user р╕Чр╕╡р╣И login р╕нр╕вр╕╣р╣И', 'error');
      setLoading(false);
      return;
    }
    
    try {
      const result = await checkUserDataCompleteness(user.uid);
      
      if (result.complete) {
        addResult('тЬЕ р╕Вр╣Йр╕нр╕бр╕╣р╕е user р╕кр╕бр╕Ър╕╣р╕гр╕Ур╣М', 'success');
      } else {
        addResult(`тЪая╕П р╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Др╕бр╣Ир╕кр╕бр╕Ър╕╣р╕гр╕Ур╣М р╕Вр╕▓р╕Ф: ${result.missing.join(', ')}`, 'warning');
      }
      
      if (result.userData) {
        addResult(`ЁЯУз Email: ${result.userData.email}`, 'info');
        addResult(`ЁЯСд Display Name: ${result.userData.displayName}`, 'info');
      }
      
      if (result.planData) {
        addResult(`ЁЯУЛ Plan: ${result.planData.planName}`, 'info');
        addResult(`ЁЯУК Daily Limit: ${result.planData.dailyLimit}`, 'info');
        addResult(`ЁЯУИ Daily Usage: ${result.planData.dailyUsage}`, 'info');
      }
    } catch (error) {
      addResult(`тЭМ Error: ${error.message}`, 'error');
    }
    
    setLoading(false);
  };

  // ЁЯЖХ р╕кр╕гр╣Йр╕▓р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕е demo р╕кр╕│р╕лр╕гр╕▒р╕Ъ user р╕Ыр╕▒р╕Ир╕Ир╕╕р╕Ър╕▒р╕Щ
  const handleCreateDemoForCurrentUser = async () => {
    setLoading(true);
    addResult('ЁЯОн р╕кр╕гр╣Йр╕▓р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕е demo р╕кр╕│р╕лр╕гр╕▒р╕Ъ user р╕Ыр╕▒р╕Ир╕Ир╕╕р╕Ър╕▒р╕Щ...', 'info');
    
    if (!user) {
      addResult('тЭМ р╣Др╕бр╣Ир╕бр╕╡ user р╕Чр╕╡р╣И login р╕нр╕вр╕╣р╣И', 'error');
      setLoading(false);
      return;
    }
    
    try {
      const result = await createDemoDataForNewUser(user.uid);
      addResult(result.success ? 'тЬЕ р╕кр╕гр╣Йр╕▓р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕е demo р╣Ар╕гр╕╡р╕вр╕Ър╕гр╣Йр╕нр╕в' : `тЭМ ${result.message}`, result.success ? 'success' : 'error');
      
      if (result.success) {
        addResult(`ЁЯТм Demo Chat ID: ${result.demoChatId}`, 'info');
      }
    } catch (error) {
      addResult(`тЭМ Error: ${error.message}`, 'error');
    }
    
    setLoading(false);
  };

  // Test 1: р╕кр╕гр╣Йр╕▓р╕Зр╣Вр╕Др╕гр╕Зр╕кр╕гр╣Йр╕▓р╕Зр╣Гр╕лр╕бр╣Ир╕кр╕│р╕лр╕гр╕▒р╕Ъ user
  const handleTestCreateUser = async () => {
    setLoading(true);
    addResult('тЪая╕П р╕Яр╕╡р╣Ар╕Ир╕нр╕гр╣Мр╕Бр╕▓р╕гр╕Чр╕Фр╕кр╕нр╕Ъ Mock User Structure р╕Цр╕╣р╕Бр╕ер╕Ър╕нр╕нр╕Бр╣Бр╕ер╣Йр╕з', 'info');
    addResult('р╣Гр╕Кр╣Йр╕гр╕░р╕Ър╕Ъ Auto Setup р╕кр╕│р╕лр╕гр╕▒р╕Ъ user р╕Ир╕гр╕┤р╕Зр╣Бр╕Чр╕Щ', 'info');
    setLoading(false);
  };

  // Test 2: р╕кр╕гр╣Йр╕▓р╕З chat session
  const handleTestCreateChat = async () => {
    setLoading(true);
    addResult('тЪая╕П р╕Яр╕╡р╣Ар╕Ир╕нр╕гр╣Мр╕Бр╕▓р╕гр╕Чр╕Фр╕кр╕нр╕Ъ Mock Chat Session р╕Цр╕╣р╕Бр╕ер╕Ър╕нр╕нр╕Бр╣Бр╕ер╣Йр╕з', 'info');
    addResult('р╣Гр╕Кр╣Йр╕гр╕░р╕Ър╕Ъ Auto Setup р╕кр╕│р╕лр╕гр╕▒р╕Ъ user р╕Ир╕гр╕┤р╕Зр╣Бр╕Чр╕Щ', 'info');
    setLoading(false);
  };

  // Test 3: р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕б
  const handleTestSaveMessage = async () => {
    setLoading(true);
    addResult('тЪая╕П р╕Яр╕╡р╣Ар╕Ир╕нр╕гр╣Мр╕Бр╕▓р╕гр╕Чр╕Фр╕кр╕нр╕Ъ Mock Messages р╕Цр╕╣р╕Бр╕ер╕Ър╕нр╕нр╕Бр╣Бр╕ер╣Йр╕з', 'info');
    addResult('р╣Гр╕Кр╣Йр╕гр╕░р╕Ър╕Ъ Auto Setup р╕кр╕│р╕лр╕гр╕▒р╕Ъ user р╕Ир╕гр╕┤р╕Зр╣Бр╕Чр╕Щ', 'info');
    setLoading(false);
  };

  // Test 4: р╕Фр╕╢р╕Зр╕Ыр╕гр╕░р╕зр╕▒р╕Хр╕┤р╕Бр╕▓р╕гр╕кр╕Щр╕Чр╕Щр╕▓
  const handleTestGetHistory = async () => {
    setLoading(true);
    addResult('тЪая╕П р╕Яр╕╡р╣Ар╕Ир╕нр╕гр╣Мр╕Бр╕▓р╕гр╕Чр╕Фр╕кр╕нр╕Ъ Mock History р╕Цр╕╣р╕Бр╕ер╕Ър╕нр╕нр╕Бр╣Бр╕ер╣Йр╕з', 'info');
    addResult('р╣Гр╕Кр╣Йр╕гр╕░р╕Ър╕Ъ Auto Setup р╕кр╕│р╕лр╕гр╕▒р╕Ъ user р╕Ир╕гр╕┤р╕Зр╣Бр╕Чр╕Щ', 'info');
    setLoading(false);
  };

  // Test 5: р╕кр╕гр╣Йр╕▓р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕е mockup р╣Гр╕лр╣Йр╕кр╕бр╕Ър╕╣р╕гр╕Ур╣М 100%
  const handleCreateCompleteMockup = async () => {
    setLoading(true);
    addResult('тЪая╕П р╕Яр╕╡р╣Ар╕Ир╕нр╕гр╣Мр╕Бр╕▓р╕гр╕Чр╕Фр╕кр╕нр╕Ъ Complete Mockup р╕Цр╕╣р╕Бр╕ер╕Ър╕нр╕нр╕Бр╣Бр╕ер╣Йр╕з', 'info');
    addResult('р╣Гр╕Кр╣Йр╕гр╕░р╕Ър╕Ъ Auto Setup р╕кр╕│р╕лр╕гр╕▒р╕Ъ user р╕Ир╕гр╕┤р╕Зр╣Бр╕Чр╕Щ', 'info');
    setLoading(false);
  };

  // Test 6: р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Др╕зр╕▓р╕бр╕кр╕бр╕Ър╕╣р╕гр╕Ур╣Мр╕Вр╕нр╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕е
  const handleVerifyCompleteness = async () => {
    setLoading(true);
    addResult('тЪая╕П р╕Яр╕╡р╣Ар╕Ир╕нр╕гр╣Мр╕Бр╕▓р╕гр╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ Mock Data Completeness р╕Цр╕╣р╕Бр╕ер╕Ър╕нр╕нр╕Бр╣Бр╕ер╣Йр╕з', 'info');
    addResult('р╣Гр╕Кр╣Йр╕гр╕░р╕Ър╕Ъ Auto Setup р╕кр╕│р╕лр╕гр╕▒р╕Ъ user р╕Ир╕гр╕┤р╕Зр╣Бр╕Чр╕Щ', 'info');
    setLoading(false);
  };

  // р╣Бр╕кр╕Фр╕Зр╣Вр╕Др╕гр╕Зр╕кр╕гр╣Йр╕▓р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕е
  const showDataStructure = () => {
    const structure = getDataStructureInfo();
    addResult('ЁЯУЛ р╣Вр╕Др╕гр╕Зр╕кр╕гр╣Йр╕▓р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Чр╕╡р╣Ир╕Др╕зр╕гр╕бр╕╡:', 'info');
    
    Object.entries(structure).forEach(([key, value]) => {
      addResult(`ЁЯФ╣ ${key}: ${value.description}`, 'info');
      addResult(`   Fields: ${value.fields.join(', ')}`, 'info');
    });
  };

  // р╕ер╣Йр╕▓р╕Зр╕Ьр╕ер╕ер╕▒р╕Юр╕Шр╣М
  const clearResults = () => {
    setResults([]);
    addResult('ЁЯз╣ р╕ер╣Йр╕▓р╕Зр╕Ьр╕ер╕ер╕▒р╕Юр╕Шр╣Мр╣Ар╕гр╕╡р╕вр╕Ър╕гр╣Йр╕нр╕в', 'info');
  };

  return (
    <div className="p-6 max-w-6xl mx-auto">
      <h2 className="text-2xl font-bold mb-6">ЁЯФз Database Restructure Test</h2>
      
      {/* р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕кр╕Цр╕▓р╕Щр╕░ */}
      <div className="bg-gray-100 p-4 rounded-lg mb-6">
        <h3 className="font-semibold mb-2">ЁЯУК р╕кр╕Цр╕▓р╕Щр╕░р╕Бр╕▓р╕гр╕Чр╕Фр╕кр╕нр╕Ъ</h3>
        <p>Current User: <span className="font-mono text-sm">{user ? user.uid : 'р╣Др╕бр╣Ир╕бр╕╡ user login'}</span></p>
        <p>Last Test User ID: <span className="font-mono text-sm">{lastTestUserId || 'р╕вр╕▒р╕Зр╣Др╕бр╣Ир╕бр╕╡'}</span></p>
        <p>Test Chat ID: <span className="font-mono text-sm">{testChatId || 'р╕вр╕▒р╕Зр╣Др╕бр╣Ир╕бр╕╡'}</span></p>
      </div>

      {/* ЁЯЖХ р╕Ыр╕╕р╣Ир╕бр╕Чр╕Фр╕кр╕нр╕Ър╕гр╕░р╕Ър╕Ъ Auto Setup */}
      <div className="mb-6">
        <h3 className="text-lg font-semibold mb-3">ЁЯЪА р╕гр╕░р╕Ър╕Ъ Auto Setup (р╕кр╕│р╕лр╕гр╕▒р╕Ъ User р╕Ир╕гр╕┤р╕З)</h3>
        <div className="grid grid-cols-3 gap-4">
          <button
            onClick={handleTestAutoSetup}
            disabled={loading || !user}
            className="bg-purple-600 text-white px-4 py-2 rounded hover:bg-purple-700 disabled:opacity-50 font-bold"
          >
            ЁЯФД р╕Чр╕Фр╕кр╕нр╕Ъ Auto Setup
          </button>
          
          <button
            onClick={handleCheckCurrentUserData}
            disabled={loading || !user}
            className="bg-indigo-600 text-white px-4 py-2 rounded hover:bg-indigo-700 disabled:opacity-50"
          >
            ЁЯФН р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕е User
          </button>
          
          <button
            onClick={handleCreateDemoForCurrentUser}
            disabled={loading || !user}
            className="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700 disabled:opacity-50"
          >
            ЁЯОн р╕кр╕гр╣Йр╕▓р╕З Demo Data
          </button>
        </div>
      </div>

      {/* р╕Ыр╕╕р╣Ир╕бр╕Чр╕Фр╕кр╕нр╕Ър╕лр╕ер╕▒р╕Б */}
      <div className="mb-6">
        <h3 className="text-lg font-semibold mb-3">ЁЯзк р╕Бр╕▓р╕гр╕Чр╕Фр╕кр╕нр╕Ър╕гр╕░р╕Ър╕Ъ (Mock Data)</h3>
        <div className="grid grid-cols-3 gap-4">
          <button
            onClick={handleTestCreateUser}
            disabled={loading}
            className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 disabled:opacity-50"
          >
            1я╕ПтГг р╕Чр╕Фр╕кр╕нр╕Ър╕кр╕гр╣Йр╕▓р╕З User Structure
          </button>
          
          <button
            onClick={handleTestCreateChat}
            disabled={loading}
            className="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 disabled:opacity-50"
          >
            2я╕ПтГг р╕Чр╕Фр╕кр╕нр╕Ър╕кр╕гр╣Йр╕▓р╕З Chat Session
          </button>
          
          <button
            onClick={handleTestSaveMessage}
            disabled={loading}
            className="bg-yellow-500 text-white px-4 py-2 rounded hover:bg-yellow-600 disabled:opacity-50"
          >
            3я╕ПтГг р╕Чр╕Фр╕кр╕нр╕Ър╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕б
          </button>
          
          <button
            onClick={handleTestGetHistory}
            disabled={loading}
            className="bg-purple-500 text-white px-4 py-2 rounded hover:bg-purple-600 disabled:opacity-50"
          >
            4я╕ПтГг р╕Чр╕Фр╕кр╕нр╕Ър╕Фр╕╢р╕Зр╕Ыр╕гр╕░р╕зр╕▒р╕Хр╕┤
          </button>

          <button
            onClick={handleCreateCompleteMockup}
            disabled={loading}
            className="bg-pink-500 text-white px-4 py-2 rounded hover:bg-pink-600 disabled:opacity-50 font-bold"
          >
            ЁЯОн р╕кр╕гр╣Йр╕▓р╕З Mockup 100%
          </button>

          <button
            onClick={handleVerifyCompleteness}
            disabled={loading}
            className="bg-indigo-500 text-white px-4 py-2 rounded hover:bg-indigo-600 disabled:opacity-50"
          >
            ЁЯФН р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Др╕зр╕▓р╕бр╕кр╕бр╕Ър╕╣р╕гр╕Ур╣М
          </button>
        </div>
      </div>

      {/* р╕Ыр╕╕р╣Ир╕бр╕Чр╕Фр╕кр╕нр╕Ър╣Ар╕Юр╕┤р╣Ир╕бр╣Ар╕Хр╕┤р╕б */}
      <div className="grid grid-cols-4 gap-4 mb-6">
        <button
          onClick={async () => {
            setLoading(true);
            try {
              addResult('ЁЯФД р╕Чр╕Фр╕кр╕нр╕Ъ Migration...', 'info');
              const testUserId = lastTestUserId || 'fCrU8uEzN2PhLeTXxn5pSa3jCLO2';
              const result = await testMigration(testUserId);
              addResult(result.message, result.success ? 'success' : 'error');
            } catch (error) {
              addResult(`тЭМ Error: ${error.message}`, 'error');
            }
            setLoading(false);
          }}
          disabled={loading}
          className="bg-orange-500 text-white px-4 py-2 rounded hover:bg-orange-600 disabled:opacity-50"
        >
          5я╕ПтГг р╕Чр╕Фр╕кр╕нр╕Ъ Migration
        </button>
        
        <button
          onClick={async () => {
            setLoading(true);
            try {
              addResult('ЁЯФН р╣Ар╕Ыр╕гр╕╡р╕вр╕Ър╣Ар╕Чр╕╡р╕вр╕Ър╣Вр╕Др╕гр╕Зр╕кр╕гр╣Йр╕▓р╕З...', 'info');
              const testUserId = lastTestUserId || 'fCrU8uEzN2PhLeTXxn5pSa3jCLO2';
              const result = await testCompareStructures(testUserId);
              addResult(result.message, 'info');
              addResult(`ЁЯУК р╣Вр╕Др╕гр╕Зр╕кр╕гр╣Йр╕▓р╕Зр╣Ар╕Бр╣Ир╕▓: ${result.oldStructure.count} р╕гр╕▓р╕вр╕Бр╕▓р╕г`, 'info');
              addResult(`ЁЯЖХ р╣Вр╕Др╕гр╕Зр╕кр╕гр╣Йр╕▓р╕Зр╣Гр╕лр╕бр╣И: ${result.newStructure.count} р╕гр╕▓р╕вр╕Бр╕▓р╕г`, 'info');
            } catch (error) {
              addResult(`тЭМ Error: ${error.message}`, 'error');
            }
            setLoading(false);
          }}
          disabled={loading}
          className="bg-indigo-500 text-white px-4 py-2 rounded hover:bg-indigo-600 disabled:opacity-50"
        >
          6я╕ПтГг р╣Ар╕Ыр╕гр╕╡р╕вр╕Ър╣Ар╕Чр╕╡р╕вр╕Ър╣Вр╕Др╕гр╕Зр╕кр╕гр╣Йр╕▓р╕З
        </button>
        
        <button
          onClick={async () => {
            setLoading(true);
            try {
              addResult('ЁЯОп р╕Чр╕Фр╕кр╕нр╕Ъ End-to-End...', 'info');
              const result = await testEndToEnd();
              addResult(result.message, result.success ? 'success' : 'error');
            } catch (error) {
              addResult(`тЭМ Error: ${error.message}`, 'error');
            }
            setLoading(false);
          }}
          disabled={loading}
          className="bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600 disabled:opacity-50"
        >
          7я╕ПтГг р╕Чр╕Фр╕кр╕нр╕Ъ End-to-End
        </button>

        <button
          onClick={showDataStructure}
          disabled={loading}
          className="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600 disabled:opacity-50"
        >
          ЁЯУЛ р╣Бр╕кр╕Фр╕Зр╣Вр╕Др╕гр╕Зр╕кр╕гр╣Йр╕▓р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕е
        </button>
      </div>

      {/* р╕Ыр╕╕р╣Ир╕бр╕Ир╕▒р╕Фр╕Бр╕▓р╕г */}
      <div className="flex gap-4 mb-6">
        <button
          onClick={clearResults}
          className="bg-gray-600 text-white px-4 py-2 rounded hover:bg-gray-700"
        >
          ЁЯз╣ р╕ер╣Йр╕▓р╕Зр╕Ьр╕ер╕ер╕▒р╕Юр╕Шр╣М
        </button>
        
        <button
          onClick={async () => {
            setLoading(true);
            try {
              addResult('ЁЯФН р╕Чр╕Фр╕кр╕нр╕Ър╕Бр╕▓р╕гр╣Ар╕Кр╕╖р╣Ир╕нр╕бр╕Хр╣Ир╕н Firebase...', 'info');
              const result = await testFirebaseConnectionStatus();
              addResult(result.message, result.success ? 'success' : 'error');
            } catch (error) {
              addResult(`тЭМ Error: ${error.message}`, 'error');
            }
            setLoading(false);
          }}
          disabled={loading}
          className="bg-teal-500 text-white px-4 py-2 rounded hover:bg-teal-600 disabled:opacity-50"
        >
          ЁЯФЧ р╕Чр╕Фр╕кр╕нр╕Ъ Firebase Connection
        </button>
      </div>

      {/* р╣Бр╕кр╕Фр╕Зр╕Ьр╕ер╕ер╕▒р╕Юр╕Шр╣М */}
      <div className="bg-black text-green-400 p-4 rounded-lg font-mono text-sm max-h-96 overflow-y-auto">
        <h3 className="text-white mb-2">ЁЯУК р╕Ьр╕ер╕ер╕▒р╕Юр╕Шр╣Мр╕Бр╕▓р╕гр╕Чр╕Фр╕кр╕нр╕Ъ:</h3>
        {results.length === 0 ? (
          <p className="text-gray-400">р╕вр╕▒р╕Зр╣Др╕бр╣Ир╕бр╕╡р╕Ьр╕ер╕ер╕▒р╕Юр╕Шр╣М...</p>
        ) : (
          results.map((result, index) => (
            <div key={index} className={`mb-1 ${
              result.type === 'success' ? 'text-green-400' :
              result.type === 'error' ? 'text-red-400' :
              result.type === 'warning' ? 'text-yellow-400' :
              'text-gray-300'
            }`}>
              <span className="text-gray-500">[{result.timestamp}]</span> {result.message}
            </div>
          ))
        )}
        {loading && (
          <div className="text-yellow-400 animate-pulse">
            тП│ р╕Бр╕│р╕ер╕▒р╕Зр╕Ыр╕гр╕░р╕бр╕зр╕ер╕Ьр╕е...
          </div>
        )}
      </div>
    </div>
  );
};

export default DatabaseRestructureTest;