#!/usr/bin/env node

/**
 * Quick Compliance Check - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏£‡πá‡∏ß‡πÜ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ Firebase connection
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const projectRoot = path.join(__dirname, '..');

console.log('üîç ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Production Database Compliance ‡πÅ‡∏ö‡∏ö‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß');
console.log('=' .repeat(70));

let passed = 0;
let failed = 0;

// 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Firebase MCP Server
console.log('\nüîß 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Firebase MCP Server');
const mcpPath = path.join(projectRoot, 'mcp-servers/firebase-mcp-server.js');
if (fs.existsSync(mcpPath)) {
    const content = fs.readFileSync(mcpPath, 'utf8');
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö usage_tracking nested structure
    if (content.includes('requests: {') && content.includes('tokens: {') && content.includes('context: {')) {
        console.log('   ‚úÖ usage_tracking ‡πÉ‡∏ä‡πâ nested structure ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
        passed++;
    } else {
        console.log('   ‚ùå usage_tracking ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ nested structure');
        failed++;
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö trackingId as Document ID
    if (content.includes('trackingId = `${') && content.includes('.doc(trackingId)')) {
        console.log('   ‚úÖ trackingId ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô Document ID ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
        passed++;
    } else {
        console.log('   ‚ùå trackingId ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô Document ID');
        failed++;
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏°‡πà‡∏°‡∏µ deprecated patterns (‡∏Å‡∏£‡∏≠‡∏á‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏≠‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)
    const lines = content.split('\n').map(line => {
        // ‡∏•‡∏ö single-line comments ‡∏≠‡∏≠‡∏Å
        const commentIndex = line.indexOf('//');
        if (commentIndex !== -1) {
            return line.substring(0, commentIndex);
        }
        return line;
    });
    const codeOnly = lines.join('\n');
    const hasDeprecatedPatterns = codeOnly.includes('subscription.planType');
    if (!hasDeprecatedPatterns) {
        console.log('   ‚úÖ ‡πÑ‡∏°‡πà‡∏°‡∏µ deprecated patterns ‡πÉ‡∏ô production code');
        passed++;
    } else {
        console.log('   ‚ùå ‡∏¢‡∏±‡∏á‡∏°‡∏µ deprecated patterns ‡πÉ‡∏ô code');
        failed++;
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö currentPlan usage
    if (content.includes('currentPlan')) {
        console.log('   ‚úÖ ‡πÉ‡∏ä‡πâ currentPlan field ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
        passed++;
    } else {
        console.log('   ‚ö†Ô∏è  ‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ currentPlan ‡πÅ‡∏ó‡∏ô subscription.planType');
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö user_originals
    if (content.includes('userId: userId') && content.includes('isLocked: true')) {
        console.log('   ‚úÖ user_originals ‡πÉ‡∏ä‡πâ userId ‡πÅ‡∏•‡∏∞ isLocked ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
        passed++;
    } else {
        console.log('   ‚ùå user_originals schema ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
        failed++;
    }
    
} else {
    console.log('   ‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå Firebase MCP Server');
    failed++;
}

// 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö firebaseService.js
console.log('\nüî• 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö firebaseService.js');
const servicePath = path.join(projectRoot, 'src/services/firebaseService.js');
if (fs.existsSync(servicePath)) {
    const content = fs.readFileSync(servicePath, 'utf8');
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏°‡πà‡∏°‡∏µ deprecated patterns
    if (!content.includes('subscription.planType') && !content.includes('requestCount')) {
        console.log('   ‚úÖ ‡πÑ‡∏°‡πà‡∏°‡∏µ deprecated patterns');
        passed++;
    } else {
        console.log('   ‚ùå ‡∏¢‡∏±‡∏á‡∏°‡∏µ deprecated patterns');
        failed++;
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö collection names
    const validCollections = ['users', 'user_originals', 'conversations', 'usage_tracking', 'subscription_plans', 'billing_transactions', 'usage_analytics'];
    let hasValidCollections = false;
    validCollections.forEach(collection => {
        if (content.includes(`'${collection}'`)) {
            hasValidCollections = true;
        }
    });
    
    if (hasValidCollections) {
        console.log('   ‚úÖ ‡πÉ‡∏ä‡πâ collection names ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
        passed++;
    } else {
        console.log('   ‚ùå collection names ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
        failed++;
    }
    
} else {
    console.log('   ‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå firebaseService.js');
}

// 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö DATABASE_ARCHITECTURE_SUMMARY.md
console.log('\nüìã 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö DATABASE_ARCHITECTURE_SUMMARY.md');
const dbSummaryPath = path.join(projectRoot, '../DATABASE_ARCHITECTURE_SUMMARY.md');
if (fs.existsSync(dbSummaryPath)) {
    const content = fs.readFileSync(dbSummaryPath, 'utf8');
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö usage_tracking schema
    if (content.includes('requests: {') && content.includes('count:') && content.includes('limit:')) {
        console.log('   ‚úÖ usage_tracking schema ‡∏°‡∏µ nested structure');
        passed++;
    } else {
        console.log('   ‚ùå usage_tracking schema ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
        failed++;
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö user_originals schema
    if (content.includes('userId:') && content.includes('isLocked:')) {
        console.log('   ‚úÖ user_originals schema ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
        passed++;
    } else {
        console.log('   ‚ùå user_originals schema ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
        failed++;
    }
    
} else {
    console.log('   ‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå DATABASE_ARCHITECTURE_SUMMARY.md');
    failed++;
}

// 4. ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•
console.log('\n' + '='.repeat(70));
console.log('üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß');
console.log('=' .repeat(70));
console.log(`‚úÖ ‡∏ú‡πà‡∏≤‡∏ô: ${passed}`);
console.log(`‚ùå ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô: ${failed}`);

if (failed === 0) {
    console.log('\nüéâ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢! ‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Production Schema ‡πÅ‡∏•‡πâ‡∏ß!');
    console.log('‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡πÑ‡∏î‡πâ‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∞‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö production');
} else {
    console.log('\n‚ö†Ô∏è  ‡∏°‡∏µ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô');
}

console.log('\nüí° ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ:');
console.log('   1. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)');
console.log('   2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ Firebase emulator');
console.log('   3. Deploy ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢!');

process.exit(failed === 0 ? 0 : 1);