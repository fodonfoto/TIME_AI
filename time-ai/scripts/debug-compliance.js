#!/usr/bin/env node

/**
 * Debug Compliance Check - ‡∏´‡∏≤‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const projectRoot = path.join(__dirname, '..');

console.log('üîç Debug ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Production Database Compliance');
console.log('=' .repeat(70));

const mcpPath = path.join(projectRoot, 'mcp-servers/firebase-mcp-server.js');
if (fs.existsSync(mcpPath)) {
    const content = fs.readFileSync(mcpPath, 'utf8');
    
    console.log('\nüîß Debug Firebase MCP Server:');
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö deprecated patterns ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
    const lines = content.split('\n').filter(line => !line.trim().startsWith('//'));
    const codeOnly = lines.join('\n');
    
    console.log('\nüìã ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö deprecated patterns:');
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö subscription.planType
    if (codeOnly.includes('subscription.planType')) {
        console.log('   ‚ùå ‡∏û‡∏ö subscription.planType ‡πÉ‡∏ô code');
        const matchingLines = content.split('\n').map((line, index) => {
            if (line.includes('subscription.planType') && !line.trim().startsWith('//')) {
                return `Line ${index + 1}: ${line.trim()}`;
            }
            return null;
        }).filter(Boolean);
        matchingLines.forEach(line => console.log(`      ${line}`));
    } else {
        console.log('   ‚úÖ ‡πÑ‡∏°‡πà‡∏û‡∏ö subscription.planType ‡πÉ‡∏ô code');
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö requestCount ||
    if (codeOnly.includes('requestCount ||')) {
        console.log('   ‚ùå ‡∏û‡∏ö requestCount || ‡πÉ‡∏ô code');
        const matchingLines = content.split('\n').map((line, index) => {
            if (line.includes('requestCount ||') && !line.trim().startsWith('//')) {
                return `Line ${index + 1}: ${line.trim()}`;
            }
            return null;
        }).filter(Boolean);
        matchingLines.forEach(line => console.log(`      ${line}`));
    } else {
        console.log('   ‚úÖ ‡πÑ‡∏°‡πà‡∏û‡∏ö requestCount || ‡πÉ‡∏ô code');
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô deprecated
    const deprecatedPatterns = ['requestCount', 'planType'];
    deprecatedPatterns.forEach(pattern => {
        const regex = new RegExp(`\\b${pattern}\\s*[:|=]`, 'g');
        const matches = [];
        content.split('\n').forEach((line, index) => {
            if (regex.test(line) && !line.trim().startsWith('//')) {
                matches.push(`Line ${index + 1}: ${line.trim()}`);
            }
        });
        
        if (matches.length > 0) {
            console.log(`   ‚ö†Ô∏è  ‡∏û‡∏ö ${pattern} patterns:`);
            matches.forEach(match => console.log(`      ${match}`));
        }
    });
    
    console.log('\nüìä ‡∏™‡∏£‡∏∏‡∏õ Debug:');
    const hasSubscriptionPlanType = codeOnly.includes('subscription.planType');
    const hasRequestCountFallback = codeOnly.includes('requestCount ||');
    
    console.log(`   subscription.planType: ${hasSubscriptionPlanType ? '‚ùå ‡∏°‡∏µ' : '‚úÖ ‡πÑ‡∏°‡πà‡∏°‡∏µ'}`);
    console.log(`   requestCount ||: ${hasRequestCountFallback ? '‚ùå ‡∏°‡∏µ' : '‚úÖ ‡πÑ‡∏°‡πà‡∏°‡∏µ'}`);
    
    if (!hasSubscriptionPlanType && !hasRequestCountFallback) {
        console.log('\nüéâ ‡πÑ‡∏°‡πà‡∏û‡∏ö deprecated patterns ‡πÅ‡∏•‡πâ‡∏ß! ‡∏Ñ‡∏ß‡∏£‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö');
    } else {
        console.log('\n‚ö†Ô∏è  ‡∏¢‡∏±‡∏á‡∏û‡∏ö deprecated patterns - ‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç');
    }
    
} else {
    console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå Firebase MCP Server');
}